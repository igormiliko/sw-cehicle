{"ast":null,"code":"var _jsxFileName = \"/home/igor/type-script/src/App.tsx\",\n    _s = $RefreshSig$();\n\n// import React from 'react';\n// import Header from './components/layout/Header';\n// import Logo from './components/Logo'\n// import Sand from './assets/vehicles/sandcrawler.png'\n// import Button from './components/Button';\n// import Card from './components/Card';\n// import CardCheckout from './components/CardCheckout';\n// import PaymentType from './components/PaymentType';\n// import SmallInput from './components/SmallInput';\n// import Policy from './components/Policy';\n// import EmailCheckbox from './components/EmailCheckbox';\n// import robots from './assets/robots.svg'\n// import TrustCheckout from './components/TrustCheckout';\n// import ToastWarning from './components/ToastWarning';\n// import LargeInput from './components/LargeInput';\n// // Pages\n// import LoadPage from './views/LoadPage';\n// import GoodBuy from './views/GoodBuy';\n// import Checkout from './views/Checkout';\n// import Vehicles from './views/Vehicles';\n// import {  BrowserRouter as Router } from 'react-router-dom';\n// import Routes from './Routes';\n// function App() {\n//   return (\n//     <Router>\n//         <div className=\"overflow-x-hidden\" >\n//           <Routes />\n//         </div>\n//     </Router>\n//   );\n// }\n// export default App;\nimport React from 'react';\nimport { Formik, Field, Form, useField, useFormikContext } from 'formik';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nasync function fetchNewTextC(a, b) {\n  await new Promise(r => setTimeout(r, 500));\n  return `textA: ${a}, textB: ${b}`;\n}\n\nconst MyField = props => {\n  _s();\n\n  const {\n    values: {\n      textA,\n      textB\n    },\n    setFieldValue\n  } = useFormikContext();\n  const [field, meta] = useField(props);\n  React.useEffect(() => {\n    let isCurrent = true; // your business logic around when to fetch goes here.\n\n    if (textA.trim() !== '' && textB.trim() !== '') {\n      fetchNewTextC(textA, textB).then(textC => {\n        if (!!isCurrent) {\n          // prevent setting old values\n          setFieldValue(props.name, textC);\n        }\n      });\n    }\n\n    return () => {\n      isCurrent = false;\n    };\n  }, [textB, textA, setFieldValue, props.name]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...props,\n      ...field\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), !!meta.touched && !!meta.error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MyField, \"0B4i/mKubywUUK/YN0TkPcGT0g0=\", false, function () {\n  return [useFormikContext, useField];\n});\n\n_c = MyField;\n\nfunction App() {\n  const initialValues = {\n    textA: '',\n    textB: '',\n    textC: ''\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      onSubmit: async values => alert(JSON.stringify(values, null, 2)),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Dependent Formik fields with Async Request\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: '#555'\n          },\n          children: \"This is an example of a complex dependent field in Formik v2. In this example, textC's value is set by making an async API request based on the current values of fields textA and textB.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: /*#__PURE__*/_jsxDEV(\"em\", {\n              children: \"Instructions: enter values for textA, and textB, and then watch textC\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"textA\", /*#__PURE__*/_jsxDEV(Field, {\n              name: \"textA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"textB\", /*#__PURE__*/_jsxDEV(Field, {\n              name: \"textB\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"textC\", /*#__PURE__*/_jsxDEV(MyField, {\n              name: \"textC\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [\"(the result of \", /*#__PURE__*/_jsxDEV(\"code\", {\n                children: \"fetchNewTextC(textA, textB))\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 32\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyField\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/home/igor/type-script/src/App.tsx"],"names":["React","Formik","Field","Form","useField","useFormikContext","fetchNewTextC","a","b","Promise","r","setTimeout","MyField","props","values","textA","textB","setFieldValue","field","meta","useEffect","isCurrent","trim","then","textC","name","touched","error","App","initialValues","alert","JSON","stringify","color"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import Header from './components/layout/Header';\n// import Logo from './components/Logo'\n// import Sand from './assets/vehicles/sandcrawler.png'\n// import Button from './components/Button';\n// import Card from './components/Card';\n// import CardCheckout from './components/CardCheckout';\n// import PaymentType from './components/PaymentType';\n// import SmallInput from './components/SmallInput';\n// import Policy from './components/Policy';\n// import EmailCheckbox from './components/EmailCheckbox';\n// import robots from './assets/robots.svg'\n// import TrustCheckout from './components/TrustCheckout';\n// import ToastWarning from './components/ToastWarning';\n// import LargeInput from './components/LargeInput';\n\n// // Pages\n// import LoadPage from './views/LoadPage';\n// import GoodBuy from './views/GoodBuy';\n// import Checkout from './views/Checkout';\n// import Vehicles from './views/Vehicles';\n\n// import {  BrowserRouter as Router } from 'react-router-dom';\n// import Routes from './Routes';\n\n\n// function App() {\n//   return (\n//     <Router>\n//         <div className=\"overflow-x-hidden\" >\n//           <Routes />\n//         </div>\n//     </Router>\n//   );\n// }\n\n// export default App;\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Formik, Field, Form, useField, useFormikContext } from 'formik';\nimport './styles.css';\n\nasync function fetchNewTextC(a: string, b: string) {\n  await new Promise((r) => setTimeout(r, 500));\n  return `textA: ${a}, textB: ${b}`;\n}\n\nconst MyField = (props: any) => {\n  const {\n    values: { textA, textB },\n    setFieldValue,\n  }: any = useFormikContext();\n  const [field, meta] = useField(props);\n\n  React.useEffect(() => {\n    let isCurrent = true;\n    // your business logic around when to fetch goes here.\n    if (textA.trim() !== '' && textB.trim() !== '') {\n      fetchNewTextC(textA, textB).then((textC) => {\n        if (!!isCurrent) {\n          // prevent setting old values\n          setFieldValue(props.name, textC);\n        }\n      });\n    }\n    return () => {\n      isCurrent = false;\n    };\n  }, [textB, textA, setFieldValue, props.name]);\n\n  return (\n    <>\n      <input {...props} {...field} />\n      {!!meta.touched && !!meta.error && <div>{meta.error}</div>}\n    </>\n  );\n};\nfunction App() {\n  const initialValues = { textA: '', textB: '', textC: '' };\n\n  return (\n    <div className=\"App\">\n      <Formik\n        initialValues={initialValues}\n        onSubmit={async (values) => alert(JSON.stringify(values, null, 2))}\n      >\n        <div className=\"section\">\n          <h1>Dependent Formik fields with Async Request</h1>\n          <p style={{ color: '#555' }}>\n            This is an example of a complex dependent field in Formik v2. In\n            this example, textC's value is set by making an async API request\n            based on the current values of fields textA and textB.\n          </p>\n          <div>\n            <small>\n              <em>\n                Instructions: enter values for textA, and textB, and then watch\n                textC\n              </em>\n            </small>\n          </div>\n          <Form>\n            <label>\n              textA\n              <Field name=\"textA\" />\n            </label>\n            <label>\n              textB\n              <Field name=\"textB\" />\n            </label>\n            <label>\n              textC\n              <MyField name=\"textC\" />\n              <small>\n                (the result of <code>fetchNewTextC(textA, textB))</code>\n              </small>\n            </label>\n            <button type=\"submit\">Submit</button>\n          </Form>\n        </div>\n      </Formik>\n    </div>\n  );\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}