{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateCPF = void 0;\n\nvar mod11_1 = require(\"./mod11\");\n/**\n * Função que valida se a string é apenas\n * números repetidos.\n *\n * @param ref String númerica\n * @returns True se for contida por apenas caracteres repetidos,\n * false caso contrário\n */\n\n\nvar isRepeated = function isRepeated(ref) {\n  var ret = ref.replace(new RegExp(ref[0], 'g'), '').trim().length === 0;\n  return ret;\n};\n/**\n * Valida o CPF. A entrada pode ser com ou sem máscaras.\n * O tamanho deve ser respeitado como em '000.000.000-00' ou '00000000000'.\n * @param value\n */\n\n\nfunction validateCPF(value) {\n  // Campo sem máscara\n  var clearValue = String(value).replace(/\\D/g, ''); // O CPF possui 2 DVs, excluíndo para validar\n\n  var valWithoutDvs = clearValue.substring(0, clearValue.length - 2); // Valida se está vazio ou é valor repetido\n\n  if (!clearValue || isRepeated(clearValue)) {\n    return false;\n  } // Calcula o primeiro DV\n\n\n  var dv1 = mod11_1.mod11(valWithoutDvs, 12); // Calcula o segundo DV2\n\n  var dv2 = mod11_1.mod11(valWithoutDvs + dv1, 12); // Compara com a informação passada como paramêtro\n\n  return valWithoutDvs + dv1 + dv2 === clearValue;\n}\n\nexports.validateCPF = validateCPF;","map":{"version":3,"sources":["/home/igor/Desktop/sw-cehicle/node_modules/validations-br/lib/validations/validateCPF.js"],"names":["Object","defineProperty","exports","value","validateCPF","mod11_1","require","isRepeated","ref","ret","replace","RegExp","trim","length","clearValue","String","valWithoutDvs","substring","dv1","mod11","dv2"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,UAAU,GAAG,SAAbA,UAAa,CAAUC,GAAV,EAAe;AAC5B,MAAIC,GAAG,GAAGD,GAAG,CAACE,OAAJ,CAAY,IAAIC,MAAJ,CAAWH,GAAG,CAAC,CAAD,CAAd,EAAmB,GAAnB,CAAZ,EAAqC,EAArC,EAAyCI,IAAzC,GAAgDC,MAAhD,KAA2D,CAArE;AACA,SAAOJ,GAAP;AACH,CAHD;AAIA;AACA;AACA;AACA;AACA;;;AACA,SAASL,WAAT,CAAqBD,KAArB,EAA4B;AACxB;AACA,MAAIW,UAAU,GAAGC,MAAM,CAACZ,KAAD,CAAN,CAAcO,OAAd,CAAsB,KAAtB,EAA6B,EAA7B,CAAjB,CAFwB,CAGxB;;AACA,MAAIM,aAAa,GAAGF,UAAU,CAACG,SAAX,CAAqB,CAArB,EAAwBH,UAAU,CAACD,MAAX,GAAoB,CAA5C,CAApB,CAJwB,CAKxB;;AACA,MAAI,CAACC,UAAD,IAAeP,UAAU,CAACO,UAAD,CAA7B,EAA2C;AACvC,WAAO,KAAP;AACH,GARuB,CASxB;;;AACA,MAAII,GAAG,GAAGb,OAAO,CAACc,KAAR,CAAcH,aAAd,EAA6B,EAA7B,CAAV,CAVwB,CAWxB;;AACA,MAAII,GAAG,GAAGf,OAAO,CAACc,KAAR,CAAcH,aAAa,GAAGE,GAA9B,EAAmC,EAAnC,CAAV,CAZwB,CAaxB;;AACA,SAAOF,aAAa,GAAGE,GAAhB,GAAsBE,GAAtB,KAA8BN,UAArC;AACH;;AACDZ,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateCPF = void 0;\nvar mod11_1 = require(\"./mod11\");\n/**\n * Função que valida se a string é apenas\n * números repetidos.\n *\n * @param ref String númerica\n * @returns True se for contida por apenas caracteres repetidos,\n * false caso contrário\n */\nvar isRepeated = function (ref) {\n    var ret = ref.replace(new RegExp(ref[0], 'g'), '').trim().length === 0;\n    return ret;\n};\n/**\n * Valida o CPF. A entrada pode ser com ou sem máscaras.\n * O tamanho deve ser respeitado como em '000.000.000-00' ou '00000000000'.\n * @param value\n */\nfunction validateCPF(value) {\n    // Campo sem máscara\n    var clearValue = String(value).replace(/\\D/g, '');\n    // O CPF possui 2 DVs, excluíndo para validar\n    var valWithoutDvs = clearValue.substring(0, clearValue.length - 2);\n    // Valida se está vazio ou é valor repetido\n    if (!clearValue || isRepeated(clearValue)) {\n        return false;\n    }\n    // Calcula o primeiro DV\n    var dv1 = mod11_1.mod11(valWithoutDvs, 12);\n    // Calcula o segundo DV2\n    var dv2 = mod11_1.mod11(valWithoutDvs + dv1, 12);\n    // Compara com a informação passada como paramêtro\n    return valWithoutDvs + dv1 + dv2 === clearValue;\n}\nexports.validateCPF = validateCPF;\n"]},"metadata":{},"sourceType":"script"}