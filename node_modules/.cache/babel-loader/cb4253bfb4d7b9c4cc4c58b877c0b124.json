{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as yup from 'yup';\nimport { useValidationsBR } from 'validations-br';\nconst sellSchema = yup.object().shape({\n  firstName: yup.string().required('Seu nome por favor...'),\n  lastName: yup.string().required('O sobrenome também!'),\n  email: yup.string().email().required('Digite seu email'),\n  ccNumber: yup.string().test('CC-Numero,', 'Número de cartão inválido', value => {\n    if (/[^0-9-\\s]+/.test(value)) return false;\n    let nCheck = 0,\n        bEven = false;\n    value = value.replace(/\\D/g, \"\");\n\n    for (var n = value.length - 1; n >= 0; n--) {\n      var cDigit = value.charAt(n),\n          nDigit = parseInt(cDigit, 10);\n      if (bEven && (nDigit *= 2) > 9) nDigit -= 9;\n      nCheck += nDigit;\n      bEven = !bEven;\n    }\n\n    return nCheck % 10 === 0;\n  }).required('Coloque o número do cartão'),\n  ccName: yup.string().required('Digite o nome que está no cartão'),\n  cvv: yup.string().required('Lembre-se do cvv!'),\n  validade: yup.string().required('Digite a validade'),\n  cpfCnpj: yup.string().test('cpf/cnpj', 'Formato inválido!', _s(value => {\n    _s();\n\n    return !!value ? useValidationsBR('cnpj', value) || useValidationsBR('cpf', value) : true;\n  }, \"ozJV4jtXgI6lb11Vyg0E5KKg4nE=\", false, function () {\n    return [useValidationsBR, useValidationsBR];\n  })).required('Digite o seu CPF/CNJP'),\n  cep: yup.string().required('Digite o seu CEP'),\n  endereco: yup.string().required('Coloque o seu endereço'),\n  numero: yup.string().required('O número'),\n  complemento: yup.string().required('Use um complemento!'),\n  cidade: yup.string().required('Qual sua cidade?'),\n  bairro: yup.string().required('...e o bairro?'),\n  estado: yup.string().required('Lembre do Estado!')\n});\nexport default sellSchema;","map":{"version":3,"sources":["/home/igor/type-script/src/helpers/Schema.ts"],"names":["yup","useValidationsBR","sellSchema","object","shape","firstName","string","required","lastName","email","ccNumber","test","value","nCheck","bEven","replace","n","length","cDigit","charAt","nDigit","parseInt","ccName","cvv","validade","cpfCnpj","cep","endereco","numero","complemento","cidade","bairro","estado"],"mappings":"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","sourcesContent":["import * as yup from 'yup'\nimport { useValidationsBR } from 'validations-br';\n\nconst sellSchema = yup.object().shape({\n    firstName: yup.string().required('Seu nome por favor...') ,\n    lastName: yup.string().required('O sobrenome também!'),\n    email: yup.string().email().required('Digite seu email'),\n    ccNumber: yup.string()\n                 .test('CC-Numero,',\n                       'Número de cartão inválido',\n                       (value: any) => {\n                            if (/[^0-9-\\s]+/.test(value)) return false;\n                            let nCheck = 0, bEven = false;\n                            value = value.replace(/\\D/g, \"\");\n                            for (var n = value.length - 1; n >= 0; n--) {\n                                var cDigit = value.charAt(n),\n                                        nDigit = parseInt(cDigit, 10);\n                        \n                                if (bEven && (nDigit *= 2) > 9) nDigit -= 9;\n                                nCheck += nDigit;\n                                bEven = !bEven;\n                            }\n                            return (nCheck % 10) === 0;\n                        })\n                 .required('Coloque o número do cartão'),\n    ccName: yup.string().required('Digite o nome que está no cartão'),\n    cvv: yup.string().required('Lembre-se do cvv!'),\n    validade: yup.string().required('Digite a validade'),\n    cpfCnpj: yup.string()\n                .test('cpf/cnpj',\n                    'Formato inválido!',\n                    (value: any) => {\n                        return !!value ? (useValidationsBR('cnpj', value) || \n                                        useValidationsBR('cpf', value)) :\n                                        true\n                    })\n                .required('Digite o seu CPF/CNJP'),\n    cep: yup.string()\n            .required('Digite o seu CEP'),\n    endereco: yup.string().required('Coloque o seu endereço'),\n    numero: yup.string().required('O número'),\n    complemento: yup.string().required('Use um complemento!'),\n    cidade: yup.string().required('Qual sua cidade?'),\n    bairro: yup.string().required('...e o bairro?'),\n    estado: yup.string().required('Lembre do Estado!'), \n})\n\nexport default sellSchema;\n"]},"metadata":{},"sourceType":"module"}